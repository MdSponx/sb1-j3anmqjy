import * as functions from 'firebase-functions';
import * as admin from 'firebase-admin';
import * as nodemailer from 'nodemailer';

admin.initializeApp();

// Initialize nodemailer with Gmail credentials
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: functions.config().email.user,
    pass: functions.config().email.password
  }
});

const gmailAddress = functions.config().email.user;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function sendEmailNotificationHelper(type: string, userId: string, userData?: any) {
  try {
    let userDoc;
    let userData_final = userData;

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firestore
    if (!userData_final) {
      userDoc = await admin.firestore().collection("users").doc(userId).get();
      if (!userDoc.exists) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
      userData_final = userDoc.data() || {};
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ web_role ‡πÄ‡∏õ‡πá‡∏ô admin
    const adminSnapshot = await admin.firestore()
      .collection("users")
      .where("web_role", "==", "admin")
      .get();

    let adminEmails = adminSnapshot.docs.map(doc => doc.data()?.email).filter(Boolean);
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å web_role ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå role
    if (adminEmails.length === 0) {
      const altAdminSnapshot = await admin.firestore()
        .collection("users")
        .where("role", "==", "admin")
        .get();
      
      adminEmails = altAdminSnapshot.docs.map(doc => doc.data()?.email).filter(Boolean);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (adminEmails.length === 0) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    let emailOptions;

    switch (type) {
      case "new_director_signup":
        emailOptions = {
          to: adminEmails.join(","),
          subject: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: üì© ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö",
          html: `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ Admin,</h2>
            <p>‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö:</p>
            <ul>
              <li><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> ${userData_final.fullname_th || userData_final.fullname || userData_final.name || "N/A"}</li>
              <li><strong>‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong> ${userData_final.email || "N/A"}</li>
              <li><strong>User ID:</strong> ${userId}</li>
            </ul>
            <a href="https://thaifilmdirectors.com/admin/applications" style="padding:10px 20px; background:#EF4444; color:#fff; text-decoration:none; border-radius:5px;">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£</a>
          `
        };
        break;

      case "director_approved":
        emailOptions = {
          to: userData_final.email || "",
          subject: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! üéâ ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
          html: `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${userData_final.fullname_th || userData_final.fullname || userData_final.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"},</h2>
            <p>‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</p>
            <a href="https://thaifilmdirectors.com/edit-profile" style="padding:10px 20px; background:#EF4444; color:#fff; text-decoration:none; border-radius:5px;">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</a>
          `
        };
        break;

      case "director_rejected":
        emailOptions = {
          to: userData_final.email || "",
          subject: "‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
          html: `
            <h2>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${userData_final.fullname_th || userData_final.fullname || userData_final.name || "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"},</h2>
            <p>‡∏Ç‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
            <a href="mailto:contact@thaifilmdirectors.com" style="padding:10px 20px; background:#EF4444; color:#fff; text-decoration:none; border-radius:5px;">‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</a>
          `
        };
        break;

      default:
        throw new Error("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!emailOptions.to || emailOptions.to.trim() === "") {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ");
    }

    // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    await transporter.sendMail({
      from: `"‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡πÑ‡∏ó‡∏¢" <${gmailAddress}>`,
      ...emailOptions,
      replyTo: "admin@thaifilmdirectors.com"
    });

    console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${type} -> ${emailOptions.to}`);
    return { success: true };
  } catch (error) {
    console.error("‚ùå sendEmailNotificationHelper error:", error);
    // Enhance error with more context
    const enhancedError = error instanceof Error 
      ? new Error(`Email notification failed (${type}): ${error.message}`) 
      : new Error(`Email notification failed (${type}): ${String(error)}`);
    throw enhancedError;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Cloud Function ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
export const onNewDirectorSignup = functions
  .region("asia-southeast1")
  .firestore.document("users/{userId}")
  .onCreate(async (snapshot, context) => {
    const userId = context.params.userId;
    try {
      const userData = snapshot.data();
      
      console.log(`üìù New user created: ${userId}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô director ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isDirector = 
        userData.occupation === "director" || 
        userData.role === "director" || 
        userData.user_type === "director" ||
        userData.type === "director" ||
        userData.account_type === "director" ||
        (userData.roles && Array.isArray(userData.roles) && userData.roles.includes("director"));
      
      console.log(`üìù Is user a director? ${isDirector ? "YES" : "NO"}`);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô director ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      if (isDirector) {
        console.log(`üìù Sending email notification for new director: ${userId}`);
        await sendEmailNotificationHelper("new_director_signup", userId, userData);
        console.log(`‚úÖ Email notification sent for new director: ${userId}`);
      } else {
        console.log(`üìù Not sending email - user is not a director: ${userId}`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`‚ùå Error in onNewDirectorSignup for user ${userId}: ${errorMessage}`, error);
    }
    return null;
  });

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Cloud Function ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏≥‡∏Å‡∏±‡∏ö
export const onDirectorStatusChange = functions
  .region("asia-southeast1")
  .firestore.document("users/{userId}")
  .onUpdate(async (change, context) => {
    const userId = context.params.userId;
    try {
      const before = change.before.data();
      const after = change.after.data();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô director ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isDirector = 
        after.occupation === "director" || 
        after.role === "director" || 
        after.user_type === "director" ||
        after.type === "director" ||
        after.account_type === "director" ||
        (after.roles && Array.isArray(after.roles) && after.roles.includes("director"));
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const beforeStatus = before.verification_status || before.status || before.director_status;
      const afterStatus = after.verification_status || after.status || after.director_status;
      
      const statusChanged = beforeStatus !== afterStatus;
      
      console.log(`üìù User updated: ${userId}, Is director: ${isDirector}, Status changed: ${statusChanged} (${beforeStatus} -> ${afterStatus})`);
      
      if (isDirector && statusChanged) {
        if (afterStatus === "approved") {
          console.log(`üìù Sending approval email for director: ${userId}`);
          await sendEmailNotificationHelper("director_approved", userId, after);
          console.log(`‚úÖ Approval email sent for director: ${userId}`);
        } else if (afterStatus === "rejected") {
          console.log(`üìù Sending rejection email for director: ${userId}`);
          await sendEmailNotificationHelper("director_rejected", userId, after);
          console.log(`‚úÖ Rejection email sent for director: ${userId}`);
        } else {
          console.log(`üìù Status changed to ${afterStatus}, no email sent`);
        }
      } else {
        console.log(`üìù Not sending email - conditions not met: isDirector=${isDirector}, statusChanged=${statusChanged}`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error(`‚ùå Error in onDirectorStatusChange for user ${userId}: ${errorMessage}`, error);
    }
    return null;
  });

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å client ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
export const sendEmailNotification = functions
  .region("asia-southeast1")
  .https.onCall(async (data: { type: string; userId: string }, context) => {
    try {
      return await sendEmailNotificationHelper(data.type, data.userId);
    } catch (error) {
      console.error(`‚ùå Error in sendEmailNotification: ${error}`, error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new functions.https.HttpsError('internal', errorMessage);
    }
  });
